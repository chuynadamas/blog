<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ChuyNadaMas's Personal Blog</title><description>This is the lazaro project, the blog who return from dead</description><link>https://chuynadamas.github.io/chuynadamas/</link><language>en</language><lastBuildDate>Mon, 6 Sep 2021 21:21:15 -0500</lastBuildDate><pubDate>Mon, 6 Sep 2021 21:21:15 -0500</pubDate><ttl>250</ttl><atom:link href="https://chuynadamas.github.io/chuynadamas/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://chuynadamas.github.io/chuynadamas/posts/subscript-dictionary</guid><title>Subscript a Dictonary in swift</title><description>Subsctipt a dictionary? - No problem ðŸ§¨</description><link>https://chuynadamas.github.io/chuynadamas/posts/subscript-dictionary</link><pubDate>Mon, 6 Sep 2021 21:39:00 -0500</pubDate><content:encoded><![CDATA[<h1>Subscript a Dictonary in swift</h1><h2>The power of subscription in swift</h2><p>The dictionary are a super helpful tool given by foundation in swift, but we can make it even powerful with the powe of subscript, let see the example with the current user here in the site.</p><br/><p>I'll crete a new dictionary with to handle the color of my labels, something like this:</p><pre><code><span class="keyword">private struct</span> Utils {
    <span class="keyword">static let</span> tagVariants = [
        <span class="string">"Article"</span> : <span class="string">"variant-a"</span>,
        <span class="string">"Assembly"</span> : <span class="string">"variant-b"
        "Swift"</span>: <span class="string">"variant-c"</span>
    ]
}
</code></pre><br/><p>This is a pretty simple dictionary but every time we wan't to use any variant for the color in the css we have to call something like the following <code>Utils.tagVariants[safeKey: tag.string]</code> this is <code>O(1)</code> but the result will be an optinal string <code>String?</code> becuase could be the scenario with the dictionary fails triying to find our value.</p><br/><p>In that se have to unwrap every time we use in our code, to be sure the key already has a value</p><pre><code><span class="keyword">if let</span> actualValue = <span class="type">Utils</span>.<span class="property">tagVariants</span>[<span class="string">"Article"</span>] {
<span class="comment">//Do the rest...</span>
}
</code></pre><br/><p>This is a good practice but if you are a little bit lazy like me we can make a safe access for the subscription, something like this</p><br/><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">extension</span> <span class="type">Dictionary</span> <span class="keyword">where</span> <span class="type">Key</span> == <span class="type">String</span>, <span class="type">Value</span> == <span class="type">String</span> {
    <span class="keyword">subscript</span>(safeKey key: <span class="type">Key</span>) -&gt; <span class="type">Value</span> {
        <span class="keyword">get</span> {
            <span class="keyword">return self</span>[key] ?? <span class="string">""</span>
        }
    }
}
</code></pre><br/><p>With that every time we use our new function <code>[safeKey]</code> we are ensure that the result will be a value, and if the tag doesn't have any style we need to be sure that we have an associated type in our current dictionary.</p><br/><p>As an example now we can use the following way to acces our variants!</p><pre><code><span class="type">Utils</span>.<span class="property">tagVariants</span>[safeKey: tag.<span class="property">string</span>]
</code></pre><br/><p>Just directly without using any <code>guard</code> of <code>if let</code> logic. This is faster, but also cames with a great responsability because you have to be sure <br>that all the values that you'll use have to be in your ditionary in other case you won't have a crash... Yes, sometimes crash are good, they can help us to find some holes in our code.</p><br/><p>With great power comes great responsibility -- Uncle Ben ðŸ•¸</p>]]></content:encoded></item><item><guid isPermaLink="true">https://chuynadamas.github.io/chuynadamas/posts/hello-sillicon</guid><title>Hello Sillicon</title><description>How to do a hello world in assambler for M1 Mac</description><link>https://chuynadamas.github.io/chuynadamas/posts/hello-sillicon</link><pubDate>Sat, 28 Aug 2021 21:39:00 -0500</pubDate><content:encoded><![CDATA[<h1>Hello Sillicon</h1><h2>How the computer works</h2><p>In this is post I'll talk about how to compiler assambler code to create a <code></code><code>Hello World</code><code></code> in M1, this code is following the course of the <a href="https://www.amazon.com/Programming-64-Bit-ARM-Assembly-Language/dp/1484258800/ref=sr_1_1?crid=34ED002YD0Y9Z&dchild=1&keywords=programming+with+64-bit+arm+assembly+language&qid=1610126434">Programming with 64-Bit ARM Assembly Language</a></p><p>Below is the code that you can find the book</p><br/><pre><code><span class="comment">//
// Assembler program to print "Hello World!"
// to stdout.
//
// X0-X2 - parameters to linux function services
// X16 - linux function number
//</span>
.<span class="property">global</span> _start             <span class="comment">// Provide program starting address to linker</span>
.<span class="property">align</span> <span class="number">2</span>

<span class="comment">// Setup the parameters to print hello world
// and then call Linux to do it.</span>

_start: mov <span class="type">X0</span>, #1     <span class="comment">// 1 = StdOut</span>
        adr <span class="type">X1</span>, helloworld <span class="comment">// string to print</span>
        mov <span class="type">X2</span>, #13     <span class="comment">// length of our string</span>
        mov <span class="type">X16</span>, #4     <span class="comment">// MacOS write system call</span>
        svc <span class="number">0</span>     <span class="comment">// Call linux to output the string

// Setup the parameters to exit the program
// and then call Linux to do it.</span>

        mov     <span class="type">X0</span>, #0      <span class="comment">// Use 0 return code</span>
        mov     <span class="type">X16</span>, #1     <span class="comment">// Service command code 1 terminates this program</span>
        svc     <span class="number">0</span>           <span class="comment">// Call MacOS to terminate the program</span>

helloworld:      .<span class="dotAccess">ascii</span>  <span class="string">"Hello Sillicon!\n"</span>
</code></pre><br/><p>Also we need to create a make file in order to compile our code</p><br/><pre><code><span class="type">HelloWorld</span>: <span class="type">HelloWorld</span>.<span class="property">o</span>
     ld -macosx_version_min <span class="number">11.0.0</span> -o <span class="type">HelloWorld HelloWorld</span>.<span class="property">o</span> -lSystem -syslibroot
             `xcrun -sdk macosx --show-sdk-path` -e _start -arch arm64 

<span class="type">HelloWorld</span>.<span class="property">o</span>: <span class="type">HelloWorld</span>.<span class="property">s</span>
     <span class="keyword">as</span> -o <span class="type">HelloWorld</span>.<span class="property">o</span> <span class="type">HelloWorld</span>.<span class="property">s</span>
</code></pre><br/><p>Also please take in note that we need to install Xcode 12 at least with the compiler tools. Once we did that just open the folder in the terminal and run the following code</p><br/><pre><code>$ make -<span class="type">B</span>
</code></pre><br/><p>the <code>-B</code> is just to force the compiler to recompile even if the code doesn't change, so you can skip it if you want. Then, if you run the executable you have to see the following</p><br/><pre><code>$ ./<span class="type">HelloWorld
Hello Sillicon</span>!
$
</code></pre><br/><p>And that's it this is our first program in assambler with M1 chip! ðŸš€</p>]]></content:encoded></item></channel></rss>